import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

url = "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
names = ['sex', 'length', 'diameter', 'height', 'whole_weight', 'shucked_weight', 
         'viscera_weight', 'shell_weight', 'rings']
dataset = pd.read_csv(url, names=names)

dataset = pd.get_dummies(dataset, columns=['sex'])
X = dataset.drop(['rings'], axis=1)
y = dataset['rings']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

reg_model = LinearRegression()
reg_model.fit(X_train, y_train)

y_pred = reg_model.predict(X_test)
print('Mean Squared Error:', mean_squared_error(y_test, y_pred))
print(y_pred)

rf_model = RandomForestRegressor()
rf_model.fit(X_train, y_train)
y_pred = rf_model.predict(X_test)

print('Mean Squared Error:', mean_squared_error(y_test, y_pred))
print('R-squared:', r2_score(y_test, y_pred))

# predict the number of rings as a classification problem
# define a threshold for the number of rings
threshold = 10


y_train_class = np.where(y_train < threshold, 0, 1)
y_test_class = np.where(y_test < threshold, 0, 1)
# train a logistic regression model
log_model = LogisticRegression()
log_model.fit(X_train, y_train_class)
# predict the labels for the test set
y_pred_class = log_model.predict(X_test)


print(classification_report(y_test_class, y_pred_class))
print('Accuracy:', accuracy_score(y_test_class, y_pred_class))
svm_model = SVC()
svm_model.fit(X_train, y_train_class)
y_pred_class = svm_model.predict(X_test)


print(classification_report(y_test_class, y_pred_class))
print('Accuracy:', accuracy_score(y_test_class, y_pred_class))

# train a random forest classifier model
rfc_model = RandomForestClassifier()
rfc_model.fit(X_train, y_train_class)
y_pred_class = rfc_model.predict(X_test)

